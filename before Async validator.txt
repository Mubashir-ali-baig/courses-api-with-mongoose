const mongoose=require('mongoose')
mongoose.connect('mongodb://localhost/MyCourses')

const courseSchema=new mongoose.Schema({
    name:{
        type:String,
        required:true,
        minlength:5,
        maxlength:255,
        
    },
    catgory:{
        type:String,
        required:true,
        enum:['web','mobile','network']
    },
    _id:String,
    author:String,
    tags: {
        type:Array,
        //custom validator below
        validate:{
            validator:function(value){
                return value && value.length > 0;
            },
            message:'A course should have atleast one tag',

        }
    },
    date: Date,
    isPublished: Boolean,
    price: {
        type:Number,
        required:function(){
            return this.isPublished
        },
        min:10,
        max:200    
    }
});
const Course=mongoose.model('Course',courseSchema);

async function createCourse(){
    const course = new Course({
    name:'TensorFlow Course',
    catgory:'web',
    author: 'Mosh',
    tags:null,
    isPublished:true,
    price:15
    });
    try{
    const result=await course.save();
    console.log(result);
    }
    catch(ex){
        console.log(ex.message)
    }
}

async function getCourses(){
    return await Course
    .find({isPublished:true,tags:'backend'})
    .sort({name:1})
    .select('name author')
}
async function run(){
  const courses=await getCourses();
  console.log(courses)
}
//run();
async function updateCourse(id)
{
    const result = await Course.update({ _id: mongoose.Types.ObjectId(id) }, { 
        $set: { author: 'Mudassir Ali Baig', isPublished: true }
    });
 /*const result=await Course.update({_id:id},{
    $set:{
        author:"Mubashir Ali",
        isPublished:false

    }
})
*/
console.log(result)
}
createCourse()
/*async function run(){
    const courses = await getCourse();
    console.log(courses);
}

updateCourse("5a68fdf95db93f6477053ddd")
//run
*/